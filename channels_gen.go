// +build ignore

package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"flag"
	"go/format"
	"io/ioutil"
	"log"
	"net/http"
	"text/template"
	"time"
)

var (
	o = flag.String("o", "channels.go", "output filename")
	t = flag.Duration("t", 30*time.Second, "timeout to fetch stations")
)

func init() {
	log.SetFlags(0)
}

func main() {
	flag.Parse()
	tmpl := template.Must(template.New("program").Parse(program))
	sites := []string{
		"di.fm",
		"radiotunes.com",
		"jazzradio.com",
		"rockradio.com",
		"classicalradio.com",
	}
	client := &http.Client{Timeout: *t}
	stations := make(map[string][]interface{})
	for _, s := range sites {
		b, err := fetch(client, s)
		if err != nil {
			log.Fatal(err)
		}
		var channels []interface{}
		err = json.Unmarshal(b, &channels)
		if err != nil {
			log.Fatal(err)
		}
		stations[s] = channels
	}
	err := write(*o, tmpl, stations)
	if err != nil {
		log.Fatal(err)
	}
}

func fetch(client *http.Client, station string) ([]byte, error) {
	url := "http://listen." + station + "/premium_high.json"
	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("User-Agent", "tune")
	req.Header.Set("Content-Type", "application/json; charset=utf-8")
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return nil, errors.New("fetch error")
	}
	return ioutil.ReadAll(resp.Body)
}

func write(filename string, tmpl *template.Template, stations map[string][]interface{}) error {
	var buf bytes.Buffer
	err := tmpl.Execute(&buf, stations)
	if err != nil {
		return err
	}
	data, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	return ioutil.WriteFile(filename, data, 0644)
}

const program = `
// generated by channels_gen.go

package tune

// Channels represents the available channels keyed by station
// and channel identifier.
var Channels = map[string]map[int]*Channel{
{{range $name, $channels := .}}	"{{$name}}": map[int]*Channel{
{{range $c := $channels}} {{$c.id}}: { "{{$c.name}}", "{{$c.playlist}}" },
{{end}}
},
{{end}}
}
`
